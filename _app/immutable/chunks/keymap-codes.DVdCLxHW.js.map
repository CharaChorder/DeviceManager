{"version":3,"mappings":"iDAOa,MAAAA,EAAqB,MAAM,QAAQ,IAC9C,OAAO,OAAoD,8DAAAC,EAAA,iNAAAA,EAAA,kHAAAA,EAAA,wGAAAA,EAAA,mGAAAA,EAAA,oMAAAA,EAAA,4DAAE,IAC3D,MAAOC,GAASA,IAAO,KAAMC,GAAQA,EAAW,OAAO,CACzD,CACF,EAEaC,EAAe,IAAI,IAC9BJ,EAAkB,QAASK,GACzB,OAAO,QAAQA,EAAS,OAAO,EAAE,IAAI,CAAC,CAACC,EAAMC,CAAM,IAAM,CACvD,OAAOD,CAAI,EACX,CAAE,GAAGC,EAAQ,KAAM,OAAOD,CAAI,EAAG,SAAAD,CAAS,EAC3C,CACH,CACF,EAEaG,EAAkB,IAAI,IACjCR,EAAkB,QAASK,GACzB,OAAO,QAAQA,EAAS,OAAO,EAAE,IAC/B,CAAC,CAACC,EAAMC,CAAM,IAAM,CAACA,EAAO,QAAU,OAAOD,CAAI,CAAC,CACpD,GACA,OAAO,CAAC,CAACG,CAAO,IAAMA,IAAY,MAAS,CAC/C,EAEaC,EAAa,IAAI,IAC5BV,EAAkB,QAASK,GACzB,OAAO,QAAQA,EAAS,OAAO,EAAE,IAC/B,CAAC,CAACC,EAAMC,CAAM,IACZ,CAACA,EAAO,GAAK,CAAE,GAAGA,EAAQ,KAAM,OAAOD,CAAI,EAAG,SAAAD,EAAU,CAC5D,GACA,OAAO,CAAC,CAACM,CAAE,IAAMA,IAAO,MAAS,CACrC","names":["KEYMAP_CATEGORIES","__vitePreload","load","it","KEYMAP_CODES","category","code","action","KEYMAP_KEYCODES","keyCode","KEYMAP_IDS","id"],"ignoreList":[],"sources":["../../../../../../src/lib/serial/keymap-codes.ts"],"sourcesContent":["import type { ActionInfo, KeymapCategory } from \"$lib/assets/keymaps/keymap\";\n\nexport interface KeyInfo extends Partial<ActionInfo> {\n  code: number;\n  category?: KeymapCategory;\n}\n\nexport const KEYMAP_CATEGORIES = (await Promise.all(\n  Object.values(import.meta.glob(\"$lib/assets/keymaps/*.yml\")).map(\n    async (load) => load().then((it) => (it as any).default),\n  ),\n)) as KeymapCategory[];\n\nexport const KEYMAP_CODES = new Map<number, KeyInfo>(\n  KEYMAP_CATEGORIES.flatMap((category) =>\n    Object.entries(category.actions).map(([code, action]) => [\n      Number(code),\n      { ...action, code: Number(code), category },\n    ]),\n  ),\n);\n\nexport const KEYMAP_KEYCODES = new Map<string, number>(\n  KEYMAP_CATEGORIES.flatMap((category) =>\n    Object.entries(category.actions).map(\n      ([code, action]) => [action.keyCode!, Number(code)] as const,\n    ),\n  ).filter(([keyCode]) => keyCode !== undefined),\n);\n\nexport const KEYMAP_IDS = new Map<string, KeyInfo>(\n  KEYMAP_CATEGORIES.flatMap((category) =>\n    Object.entries(category.actions).map(\n      ([code, action]) =>\n        [action.id!, { ...action, code: Number(code), category }] as const,\n    ),\n  ).filter(([id]) => id !== undefined),\n);\n"],"file":"_app/immutable/chunks/keymap-codes.DVdCLxHW.js"}