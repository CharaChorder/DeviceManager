import{_ as e}from "./preload-helper.a4192956.js";const a=await Promise.all(Object.values(Object.assign({"/src/lib/assets/keymaps/ascii.yml":()=>e(()=>import("./ascii.d8638a08.js"),[],import.meta.url),"/src/lib/assets/keymaps/chara-chorder-one.yml":()=>e(()=>import("./chara-chorder-one.c44695b9.js"),[],import.meta.url),"/src/lib/assets/keymaps/chara-chorder.yml":()=>e(()=>import("./chara-chorder.62e85c0b.js"),[],import.meta.url),"/src/lib/assets/keymaps/cp-1252.yml":()=>e(()=>import("./cp-1252.3d455c48.js"),[],import.meta.url),"/src/lib/assets/keymaps/keyboard.yml":()=>e(()=>import("./keyboard.64abeb17.js"),[],import.meta.url),"/src/lib/assets/keymaps/mouse.yml":()=>e(()=>import("./mouse.8d538063.js"),[],import.meta.url),"/src/lib/assets/keymaps/scancode.yml":()=>e(()=>import("./scancode.a9156a11.js"),[],import.meta.url)})).map(async s=>s().then(t=>t.default))),i=Object.fromEntries(a.flatMap(s=>Object.entries(s.actions).map(([t,r])=>[Number(t),{...r,code:Number(t),category:s}]))),_=new Map(a.flatMap(s=>Object.entries(s.actions).map(([t,r])=>[r.id,{...r,code:Number(t),category:s}])).filter(([s])=>s!==void 0)),o=new Map([[" ",32]]);export{i as K,_ as a,a as b,o as s};
